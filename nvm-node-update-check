#!/usr/bin/env bash

# Bash strict mode.
set -eEo pipefail
set -x

# Returns 0 if you have the latest version of node, 1 if you don't,
# and 2 if you somehow have a later version of node than the latest.
# The "--lts" option may be passed in to just check long term service versions.
nvmNodeUpdateCheck() {
    declare latestVersionRemote latestVersionLocal option

    if [ "$#" -gt 1 ]; then
        echo "Invalid number of arguments."
    fi

    option=""

    if [[ "$1" != "--lts" ]] && [[ "$1" != "" ]]; then
        echo "Option not recognized. Ignoring..."
        option=""
    else
        option="$1"
    fi

    # One liner for getting the location of where this script is.
    workingDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

    # Import stuffs.
    # shellcheck disable=SC1090
    source "$workingDir/version-compare"

    # If NVM exists, source it.
    # Else exit.
    # True if the file exists and has a size greater than zero.
    if [[ -s "$HOME/.nvm/nvm.sh" ]]; then
        # shellcheck disable=SC1090
        . "$HOME/.nvm/nvm.sh"
    else
        echo "NVM doesn't exist on your system... :/"
        exit 1
    fi

    latestVersionRemote=$(nvm version-remote "$option")
    echo "The latest remote Node version is: '$latestVersionRemote'"
    latestVersionLocal=$(nvm version "$option")
    echo "The latest local Node version is: '$latestVersionLocal'"

    versionCompare "$latestVersionRemote" "$latestVersionLocal"
    comparison="$?"

    if [[ "$comparison" == 0 ]]; then
        # The latest version of Node is installed.
        return "$comparison"
    elif [[ "$comparison" == 1 ]]; then
        # Don't have the latest version installed.
        return "$comparison"
    else
        # Somehow a later version than the latest is installed...
        return "$comparison"
    fi
}

